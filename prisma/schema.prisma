generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  githubUsername String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  repoViews     RepositoryView[]

  @@index([email])
  @@index([githubUsername])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Repository {
  id               String           @id @default(cuid())
  owner            String
  name             String
  fullName         String           @unique // owner/name
  description      String?
  language         String?
  stars            Int              @default(0)
  forks            Int              @default(0)
  watchers         Int              @default(0)
  size             Int              @default(0)
  openIssues       Int              @default(0)
  isPrivate        Boolean          @default(false)
  isArchived       Boolean          @default(false)
  htmlUrl          String
  cloneUrl         String
  defaultBranch    String           @default("main")
  topics           String[]
  license          String?
  hasWiki          Boolean          @default(false)
  hasPages         Boolean          @default(false)
  hasProjects      Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastSyncAt       DateTime         @default(now())
  views            RepositoryView[]
  analyses         RepositoryAnalysis[]

  @@index([owner])
  @@index([fullName])
  @@index([language])
  @@index([isPrivate])
}

model RepositoryView {
  id           String     @id @default(cuid())
  userId       String?
  repositoryId String
  ipAddress    String?
  userAgent    String?
  viewedAt     DateTime   @default(now())
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([repositoryId])
  @@index([viewedAt])
  @@index([ipAddress])
}

model RepositoryAnalysis {
  id                    String     @id @default(cuid())
  repositoryId          String
  totalLines            Int?
  totalFiles            Int?
  avgComplexity         Float?
  testCoverage          Int?
  securityScore         Int?
  maintainabilityScore  Int?
  documentationScore    Int?
  vulnerabilities       Json?      // Array of vulnerability objects
  contributors          Json?      // Array of contributor objects
  commits               Json?      // Array of commit activity data
  fileTypes             Json?      // Array of file type distribution
  aiInsights            String?
  aiInsightsGeneratedAt DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  repository            Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId])
  @@index([createdAt])
}
