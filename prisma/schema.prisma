generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  interviews    Interview[]
  sessions      Session[]
  subscriptions Subscription[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Interview {
  id             String              @id @default(cuid())
  userId         String
  type           InterviewType
  status         InterviewStatus     @default(SCHEDULED)
  jobTitle       String?
  company        String?
  industry       String?
  jobDescription String?
  visaType       String?
  resumeUrl      String?
  conversationId String?             @unique
  personaId      String?
  scheduledAt    DateTime?
  startedAt      DateTime?
  endedAt        DateTime?
  duration       Int?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback       InterviewFeedback?
  questions      InterviewQuestion[]

  @@index([userId])
  @@index([type])
  @@index([status])
}

model InterviewFeedback {
  id                 String    @id @default(cuid())
  interviewId        String    @unique
  overallScore       Int?
  communicationScore Int?
  technicalScore     Int?
  confidenceScore    Int?
  strengths          String[]
  improvements       String[]
  detailedFeedback   String?
  aiAnalysis         Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  interview          Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id           String    @id @default(cuid())
  interviewId  String
  question     String
  answer       String?
  askedAt      DateTime
  answeredAt   DateTime?
  responseTime Int?
  score        Int?
  feedback     String?
  createdAt    DateTime  @default(now())
  interview    Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  type                 SubscriptionType
  status               SubscriptionStatus @default(ACTIVE)
  interviewsLimit      Int                @default(10)
  interviewsUsed       Int                @default(0)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  startDate            DateTime           @default(now())
  endDate              DateTime?
  cancelledAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

enum InterviewType {
  VISA_F1
  VISA_B2
  VISA_H1B
  JOB_HR
  JOB_TECHNICAL
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}
